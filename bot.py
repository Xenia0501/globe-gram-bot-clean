import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from config import TELEGRAM_BOT_TOKEN
from generator.post_generator import generate_full_post
from storage import set_group, get_group, set_user_settings, get_user_settings

logging.basicConfig(level=logging.INFO)

STYLES = ["–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π", "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π"]
STYLE, TOPICS, SCHEDULE = range(3)
reply_keyboard = [[s] for s in STYLES]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì© –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç—Ä–µ–≤–µ–ª-–±–æ—Ç –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º.\n\n"
        "üñäÔ∏è –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É:\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É\n"
        "2Ô∏è‚É£ –ù–∞–∑–Ω–∞—á—å –∞–¥–º–∏–Ω–æ–º\n"
        "3Ô∏è‚É£ –í –≥—Ä—É–ø–ø–µ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /register\n\n"
        "‚öôÔ∏è –ó–∞—Ç–µ–º –≤ –ª–∏—á–∫–µ –Ω–∞—Å—Ç—Ä–æ–∏—à—å —Å—Ç–∏–ª—å, —Ç–µ–º—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ /settings"
    )

# /register –≤ –≥—Ä—É–ø–ø–µ
async def register_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user

    if chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥—É /register –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ.")
        return

    set_group(user.id, chat.id)
    await update.message.reply_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤: `{chat.id}`\n\n"
        "üí¨ –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å—Ç–∏–ª—å, —Ç–µ–º—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É –∫–æ–º–∞–Ω–¥—É /settings",
        parse_mode="Markdown"
    )

# /settings ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üåà –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤:", reply_markup=markup)
    return STYLE

async def set_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["style"] = update.message.text
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ /skip):")
    return TOPICS

async def set_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topics = [t.strip() for t in update.message.text.split(",") if t.strip()]
    context.user_data["topics"] = topics
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00):")
    return SCHEDULE

async def skip_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["topics"] = []
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00):")
    return SCHEDULE

async def set_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    schedule = update.message.text
    user_id = update.effective_user.id
    set_user_settings(user_id, {
        "style": context.user_data["style"],
        "topics": context.user_data["topics"],
        "schedule": schedule
    })
    await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ú—ã –Ω–∞—Å—Ç—Ä–æ–∏–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ –Ω–∏–º.")
    return ConversationHandler.END

# /publish ‚Äî –≤—ã–∑–æ–≤–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ Make/Zapier
async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    group_id = get_group(user_id)
    settings = get_user_settings(user_id)

    if not group_id or not settings:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π /register –∏ /settings.")
        return

    style = settings.get("style")
    topics = settings.get("topics", [])
    topic = topics[0] if topics else None  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É, –µ—Å–ª–∏ –µ—Å—Ç—å

    post = generate_full_post(style=style, topic=topic)

    try:
        await context.bot.send_photo(chat_id=group_id, photo=post["image_url"], caption=post["text"])
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n"
        "2Ô∏è‚É£ –°–¥–µ–ª–∞–π –∞–¥–º–∏–Ω–æ–º\n"
        "3Ô∏è‚É£ –í –≥—Ä—É–ø–ø–µ –Ω–∞–ø–∏—à–∏ /register\n"
        "4Ô∏è‚É£ –í –ª–∏—á–∫–µ –≤–≤–µ–¥–∏ /settings –∏ –∑–∞–¥–∞–π —Å—Ç–∏–ª—å, —Ç–µ–º—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "‚öôÔ∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —á–µ—Ä–µ–∑ Make –∏–ª–∏ Zapier –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
    )

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# MAIN
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_settings = ConversationHandler(
        entry_points=[CommandHandler("settings", settings)],
        states={
            STYLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_style)],
            TOPICS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_topics),
                CommandHandler("skip", skip_topics)
            ],
            SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_schedule)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_settings)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register_group))
    app.add_handler(CommandHandler("settings", settings))
    app.add_handler(CommandHandler("publish", publish))
    app.add_handler(CommandHandler("help", help_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
